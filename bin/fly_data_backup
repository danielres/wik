#!/bin/sh

# Set variables
DATETIME=$(date -u '+%Y-%m-%d_%H-%M-%S')
ARCHIVE_NAME="wik_prod-$DATETIME.tar.gz"

# Project root directory and local backup path
LOCAL_ROOT_DIR=$(git rev-parse --show-toplevel)
LOCAL_BACKUPS_DIR="$LOCAL_ROOT_DIR/backups"
LOCAL_ARCHIVE_PATH="$LOCAL_BACKUPS_DIR/$ARCHIVE_NAME"
LOCAL_LATEST_BACKUP_DIR="$LOCAL_BACKUPS_DIR/$DATETIME"

# Remote paths
REMOTE_DIR="/mnt/data"
REMOTE_BACKUP_DIR="/tmp/backups"
REMOTE_ARCHIVE_PATH="$REMOTE_BACKUP_DIR/$ARCHIVE_NAME"

# Remote commands
REMOTE_MAKE_BACKUP_DIR="mkdir -p $REMOTE_BACKUP_DIR"
REMOTE_MAKE_ARCHIVE="tar -zcvf $REMOTE_ARCHIVE_PATH --exclude \"lost+found\" $REMOTE_DIR"
REMOTE_CMD="$REMOTE_MAKE_BACKUP_DIR && $REMOTE_MAKE_ARCHIVE"

# Create local backup directory
mkdir -p "$LOCAL_BACKUPS_DIR"
if [ $? -ne 0 ]; then
    echo "Error: Failed to create local backup directory: $LOCAL_BACKUPS_DIR"
    exit 1
fi

# Create the compressed archive on the remote Fly.io VM
fly ssh console -C "bash -c '$REMOTE_CMD'"
if [ $? -ne 0 ]; then
    echo "Error: Failed to create archive on remote VM"
    exit 1
fi

# Download the compressed file to the local backup directory
fly ssh sftp get "$REMOTE_ARCHIVE_PATH" "$LOCAL_ARCHIVE_PATH"
if [ $? -ne 0 ]; then
    echo "Error: Failed to download archive from $REMOTE_ARCHIVE_PATH to $LOCAL_ARCHIVE_PATH"
    exit 1
fi
echo ""
echo "Backup completed:"
echo "Local backups dir: $LOCAL_BACKUPS_DIR"
echo "Local archive path: $LOCAL_ARCHIVE_PATH"

echo ""
echo "Extracting archive..."
mkdir -p $LOCAL_LATEST_BACKUP_DIR
tar -xf "$LOCAL_ARCHIVE_PATH" -C "$LOCAL_LATEST_BACKUP_DIR"
if [ $? -ne 0 ]; then
    echo "Error: Failed to extract archive to $LOCAL_LATEST_BACKUP_DIR"
    exit 1
fi

echo ""
echo "Extraction completed:"
echo "latest backup dir: $LOCAL_LATEST_BACKUP_DIR"
cd $LOCAL_BACKUPS_DIR
ln -s "$LOCAL_LATEST_BACKUP_DIR/mnt/data" latest
echo "or: $LOCAL_BACKUPS_DIR/latest"
